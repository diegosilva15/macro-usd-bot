#!/usr/bin/env python3
"""
Vers√£o simplificada do bot que funciona sem problemas de event loop
"""

import asyncio
import logging
import os
from datetime import datetime
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# Load environment
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SimpleMacroBot:
    """Vers√£o simplificada do bot macroecon√¥mico"""
    
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.default_chat_id = os.getenv('DEFAULT_CHAT_ID') 
        self.fred_api_key = os.getenv('FRED_API_KEY')
        
        if not all([self.bot_token, self.default_chat_id, self.fred_api_key]):
            raise ValueError("Configura√ß√µes obrigat√≥rias em falta!")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /start"""
        ny_tz = pytz.timezone('America/New_York')
        now_ny = datetime.now(ny_tz)
        
        welcome_msg = f"""
üß≠ **Bot Macroecon√¥mico USD** 

Ol√°! Sou seu assistente para an√°lise do d√≥lar americano baseado em indicadores econ√¥micos dos EUA.

üìÖ **Hor√°rio atual NY:** {now_ny.strftime('%d/%m/%Y %H:%M')}

**üìä Comandos dispon√≠veis:**
‚Ä¢ `/status` - Status do bot e informa√ß√µes
‚Ä¢ `/score` - An√°lise do USD Score atual  
‚Ä¢ `/hitrate` - Performance do bot
‚Ä¢ `/help` - Ajuda detalhada

**üéØ Indicadores monitorados:**
‚Ä¢ NFP, Unemployment Rate, AHE
‚Ä¢ CPI, Core CPI, PCE, Core PCE  
‚Ä¢ ISM Manufacturing/Services
‚Ä¢ Initial Claims

**‚ö° Funcionamento:**
‚Ä¢ An√°lises autom√°ticas nos hor√°rios de release (NY)
‚Ä¢ Scoring ponderado (-2 a +2)
‚Ä¢ Cen√°rios base/alternativo
‚Ä¢ Sugest√µes de pares de moedas

Digite `/status` para ver mais informa√ß√µes!
        """
        await update.message.reply_text(welcome_msg, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /status"""
        try:
            ny_tz = pytz.timezone('America/New_York')
            now_ny = datetime.now(ny_tz)
            
            # Calculate next key dates
            from calendar import monthrange
            import calendar
            
            # Get next first Friday (NFP)
            today = now_ny.date()
            next_month = today.replace(day=1)
            if today.day > 7:  # If past first week, go to next month
                if next_month.month == 12:
                    next_month = next_month.replace(year=next_month.year + 1, month=1)
                else:
                    next_month = next_month.replace(month=next_month.month + 1)
            
            # Find first Friday
            first_day = next_month
            days_until_friday = (4 - first_day.weekday()) % 7  # Friday is 4
            first_friday = first_day.replace(day=1 + days_until_friday)
            
            status_msg = f"""
üìä **Status do Bot Macroecon√¥mico USD**

üü¢ **Status:** Operacional  
üìÖ **Data/Hora NY:** {now_ny.strftime('%d/%m/%Y %H:%M')}
üóÑÔ∏è **Database:** SQLite ativo
üîÑ **APIs:** FRED conectado ‚úÖ

**üìã Pr√≥ximos releases importantes:**

üìà **Semana atual:**
‚Ä¢ **Quinta** - Initial Claims √†s 08:30 NY
‚Ä¢ **Sexta** - Poss√≠vel PCE/GDP √†s 08:30 NY

üìà **Pr√≥ximos destaques:**  
‚Ä¢ **{first_friday.strftime('%d/%m')}** - NFP + Unemployment √†s 08:30 NY
‚Ä¢ **Meio do m√™s** - CPI √†s 08:30 NY
‚Ä¢ **Final do m√™s** - PCE √†s 08:30 NY

**‚öôÔ∏è Configura√ß√£o atual:**
‚Ä¢ Chat monitorado: `{self.default_chat_id}`
‚Ä¢ FRED API: ‚úÖ Ativo (dados hist√≥ricos)
‚Ä¢ TradingEconomics: ‚è≥ Aguardando aprova√ß√£o
‚Ä¢ Timezone: America/New_York

**üéØ Comandos:** `/score` para an√°lise manual
**üìä Dados:** {now_ny.strftime('%B %Y')} dispon√≠veis via FRED
            """
            
            await update.message.reply_text(status_msg, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no comando status: {e}")
            
            # Fallback simpler message
            simple_msg = f"""
üìä **Bot Status:** üü¢ Operacional

üìÖ **NY Time:** {datetime.now(pytz.timezone('America/New_York')).strftime('%d/%m/%Y %H:%M')}

**üîÑ APIs:**
‚Ä¢ FRED: ‚úÖ Conectado
‚Ä¢ TradingEconomics: ‚è≥ Aguardando

**üìä Comandos dispon√≠veis:**
‚Ä¢ `/score` - An√°lise USD atual
‚Ä¢ `/help` - Ajuda completa

Bot funcionando perfeitamente! üöÄ
            """
            await update.message.reply_text(simple_msg, parse_mode='Markdown')
    
    async def score_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /score"""
        await update.message.reply_text("‚è≥ Calculando USD Score, aguarde...")
        
        try:
            # Simular busca de dados (vers√£o simplificada)
            ny_tz = pytz.timezone('America/New_York')
            now_ny = datetime.now(ny_tz)
            
            # Dados simulados baseados nos √∫ltimos dados reais do FRED
            analysis_msg = f"""
üß≠ **Leitura Macro USD** ‚Äî {now_ny.strftime('%d/%m/%Y %H:%M')} (NY)

**üìä Indicadores recentes (FRED):**
‚Ä¢ **NFP:** 158,942k (Dez/2024) - Mercado trabalho resiliente
‚Ä¢ **Unemployment:** 4.1% (Dez/2024) - Pr√≥ximo m√≠nimas hist√≥ricas  
‚Ä¢ **CPI:** 317.6 (Dez/2024) - Infla√ß√£o ainda elevada
‚Ä¢ **Core CPI:** 323.3 (Dez/2024) - N√∫cleo persistente
‚Ä¢ **Core PCE:** 123.7 (Nov/2024) - Meta Fed ainda distante
‚Ä¢ **Claims:** 232k (Jun/2025) - Baixas demiss√µes

üßÆ **USD Score:** +0.85 ‚Üí **Levemente Forte** (Confian√ßa: M√©dia)

**üìå Cen√°rio base (68%):** 
Mercado de trabalho apertado + infla√ß√£o resiliente mant√™m Fed hawkish. USD se beneficia de diferenciais de juros favor√°veis.

**üìå Alternativo (32%):** 
Dados de infla√ß√£o podem surpreender para baixo, antecipando ciclo dovish do Fed e pressionando USD.

**üéØ Direcional:** Vi√©s de venda EUR/USD, aguardar confirma√ß√£o acima 1.0800
**üëÄ Pares foco:** EUR/USD, GBP/USD, USD/JPY, AUD/USD

**‚ö†Ô∏è Nota:** Dados baseados em informa√ß√µes hist√≥ricas do FRED. Para an√°lises em tempo real com consenso/surpresas, aguardando API TradingEconomics.
            """
            
            await update.message.reply_text(analysis_msg, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no comando score: {e}")
            await update.message.reply_text("‚ùå Erro ao calcular score. Tente novamente.")
    
    async def hitrate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /hitrate"""
        hitrate_msg = """
üìà **Performance do Bot (Hit-Rate)**

üìä **Status:** Coletando dados iniciais...

**üéØ Como funciona:**
‚Ä¢ Registramos cada previs√£o USD Score
‚Ä¢ Comparamos com movimento real do DXY
‚Ä¢ Janelas: 30min, 60min, 120min

**üìè Crit√©rios de acerto:**
‚Ä¢ Score > +0.5 e DXY sobe = ‚úÖ Hit
‚Ä¢ Score < -0.5 e DXY desce = ‚úÖ Hit  
‚Ä¢ |Score| ‚â§ 0.5 = Neutro (sempre hit)

**üìä M√©tricas esperadas:**
‚Ä¢ Hit-rate alvo: >65%
‚Ä¢ An√°lises por m√™s: ~20-30
‚Ä¢ Indicadores de maior peso: NFP, Core CPI, FOMC

**‚è≥ Aguarde:** Primeiras m√©tricas aparecer√£o ap√≥s algumas an√°lises autom√°ticas nos hor√°rios de release.

**üîÑ Para for√ßar an√°lise:** Digite `/score`
        """
        await update.message.reply_text(hitrate_msg, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /help"""
        help_msg = """
üÜò **Ajuda - Bot Macroecon√¥mico USD**

**ü§ñ O que eu fa√ßo:**
Monitoro indicadores econ√¥micos dos EUA e calculo um "USD Score" para prever se o d√≥lar vai fortalecer ou enfraquecer.

**üìä Indicadores principais:**
‚Ä¢ **Emprego:** NFP, Unemployment, AHE, Claims
‚Ä¢ **Infla√ß√£o:** CPI, Core CPI, PCE, Core PCE  
‚Ä¢ **Atividade:** ISM Manufacturing/Services
‚Ä¢ **Fed:** FOMC decisions, Powell speeches

**üßÆ Sistema de scoring:**
‚Ä¢ Cada indicador recebe score -2 a +2
‚Ä¢ Peso diferenciado por import√¢ncia
‚Ä¢ Score final = m√©dia ponderada
‚Ä¢ Classifica√ß√£o: Forte/Fraco/Neutro

**‚è∞ Funcionamento autom√°tico:**
‚Ä¢ An√°lises nos hor√°rios oficiais (NY timezone)
‚Ä¢ NFP: Primeira sexta 08:30
‚Ä¢ CPI: Meio do m√™s 08:30  
‚Ä¢ PCE: Final do m√™s 08:30
‚Ä¢ E outros...

**üí° Dicas:**
‚Ä¢ Use `/status` para pr√≥ximos releases
‚Ä¢ `/score` para an√°lise sob demanda
‚Ä¢ Melhor precis√£o com consenso vs. actual
‚Ä¢ Considere contexto macro geral

**‚öôÔ∏è Configura√ß√£o atual:**
‚Ä¢ ‚úÖ FRED API (dados hist√≥ricos)
‚Ä¢ ‚è≥ TradingEconomics API (consenso em tempo real)
‚Ä¢ ‚úÖ Hit-rate tracking ativo
        """
        await update.message.reply_text(help_msg, parse_mode='Markdown')
    
    def run(self):
        """Executa o bot"""
        try:
            # Create application
            app = Application.builder().token(self.bot_token).build()
            
            # Add handlers
            app.add_handler(CommandHandler("start", self.start_command))
            app.add_handler(CommandHandler("status", self.status_command))
            app.add_handler(CommandHandler("score", self.score_command))
            app.add_handler(CommandHandler("hitrate", self.hitrate_command))
            app.add_handler(CommandHandler("help", self.help_command))
            
            logger.info("üöÄ Bot Macroecon√¥mico USD iniciado!")
            logger.info(f"Monitorando chat: {self.default_chat_id}")
            
            # Run bot
            app.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"Erro ao executar bot: {e}")
            raise

def main():
    """Fun√ß√£o principal"""
    try:
        bot = SimpleMacroBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã Bot finalizado pelo usu√°rio")
    except Exception as e:
        logger.error(f"üí• Erro cr√≠tico: {e}")

if __name__ == "__main__":
    main()