#!/usr/bin/env python3
"""
Bot Macroecon√¥mico USD - Vers√£o Enhanced com Alpha Vantage
Combina FRED + Alpha Vantage para an√°lises mais precisas
"""

import asyncio
import logging
import os
from datetime import datetime, timedelta
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# Importa nossos m√≥dulos
from alpha_vantage_ingestor import AlphaVantageIngestor

# Load environment
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class EnhancedMacroBot:
    """Bot macroecon√¥mico com Alpha Vantage + FRED"""
    
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN')
        self.default_chat_id = os.getenv('DEFAULT_CHAT_ID') 
        self.fred_api_key = os.getenv('FRED_API_KEY')
        self.alpha_vantage_key = os.getenv('ALPHA_VANTAGE_API_KEY')
        
        if not all([self.bot_token, self.default_chat_id, self.fred_api_key]):
            raise ValueError("Configura√ß√µes obrigat√≥rias em falta!")
        
        # Initialize Alpha Vantage se dispon√≠vel
        self.alpha_vantage = None
        if self.alpha_vantage_key:
            self.alpha_vantage = AlphaVantageIngestor(self.alpha_vantage_key)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /start"""
        ny_tz = pytz.timezone('America/New_York')
        now_ny = datetime.now(ny_tz)
        
        av_status = "‚úÖ Conectado" if self.alpha_vantage_key else "‚è≥ Aguardando chave"
        
        welcome_msg = f"""
üß≠ **Bot Macroecon√¥mico USD Enhanced** 

Ol√°! Vers√£o aprimorada com m√∫ltiplas fontes de dados econ√¥micos!

üìÖ **Hor√°rio atual NY:** {now_ny.strftime('%d/%m/%Y %H:%M')}

**üîó APIs Configuradas:**
‚Ä¢ FRED (Federal Reserve): ‚úÖ Ativo
‚Ä¢ Alpha Vantage: {av_status}
‚Ä¢ TradingEconomics: ‚è≥ Aguardando

**üìä Comandos dispon√≠veis:**
‚Ä¢ `/status` - Status completo do sistema
‚Ä¢ `/score` - An√°lise USD Score avan√ßada  
‚Ä¢ `/summary` - Resumo econ√¥mico atual
‚Ä¢ `/help` - Manual completo

**üéØ Indicadores Enhanced:**
‚Ä¢ **Emprego:** NFP, Unemployment, AHE
‚Ä¢ **Infla√ß√£o:** CPI, Core CPI, PCE
‚Ä¢ **Atividade:** Retail Sales, GDP, Durable Goods  
‚Ä¢ **Fed:** Federal Funds Rate, Treasury Yields
‚Ä¢ **Sentimento:** Consumer Confidence

**‚ö° Novidades:**
‚Ä¢ Dados mais recentes (Alpha Vantage)
‚Ä¢ An√°lises comparativas entre fontes
‚Ä¢ Maior precis√£o nas previs√µes
‚Ä¢ Rate limiting inteligente

Digite `/summary` para ver resumo econ√¥mico atual!
        """
        await update.message.reply_text(welcome_msg, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /status enhanced"""
        try:
            ny_tz = pytz.timezone('America/New_York')
            now_ny = datetime.now(ny_tz)
            
            # Test Alpha Vantage connection se dispon√≠vel
            av_status = "‚ùå N√£o configurado"
            if self.alpha_vantage:
                await self.alpha_vantage.initialize()
                connection_ok = await self.alpha_vantage.test_api_connection()
                await self.alpha_vantage.close()
                av_status = "‚úÖ Conectado (25 calls/dia)" if connection_ok else "‚ö†Ô∏è Erro de conex√£o"
            
            status_msg = f"""
üìä **Status Enhanced - Bot Macroecon√¥mico USD**

üü¢ **Status:** Operacional Enhanced
üìÖ **Data/Hora NY:** {now_ny.strftime('%d/%m/%Y %H:%M')}
üóÑÔ∏è **Database:** SQLite ativo
üéØ **Modo:** Multi-source analysis

**üîó APIs Status:**
‚Ä¢ **FRED:** ‚úÖ Conectado (dados hist√≥ricos)
‚Ä¢ **Alpha Vantage:** {av_status}
‚Ä¢ **TradingEconomics:** ‚è≥ Aguardando chave

**üìã Releases importantes esta semana:**
‚Ä¢ **Segunda:** Retail Sales √†s 08:30 NY
‚Ä¢ **Quarta:** CPI √†s 08:30 NY  
‚Ä¢ **Quinta:** Initial Claims √†s 08:30 NY
‚Ä¢ **Sexta:** NFP + Unemployment √†s 08:30 NY

**‚öôÔ∏è Configura√ß√£o Enhanced:**
‚Ä¢ Chat: `{self.default_chat_id}`
‚Ä¢ Multi-source: ‚úÖ FRED + Alpha Vantage
‚Ä¢ Rate limiting: ‚úÖ Ativo
‚Ä¢ Timezone: America/New_York

**üéØ Comandos:** 
‚Ä¢ `/score` - An√°lise completa
‚Ä¢ `/summary` - Resumo econ√¥mico
            """
            
            await update.message.reply_text(status_msg, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no comando status: {e}")
            await update.message.reply_text("‚ùå Erro ao verificar status. Tente novamente.")
    
    async def summary_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Novo comando: Resumo econ√¥mico atual"""
        await update.message.reply_text("üìä Carregando resumo econ√¥mico... (pode demorar 1 min)")
        
        try:
            if not self.alpha_vantage:
                await update.message.reply_text("‚ùå Alpha Vantage n√£o configurado. Configure a API key primeiro.")
                return
            
            await self.alpha_vantage.initialize()
            
            # Busca dados principais
            summary_data = await self.alpha_vantage.get_latest_economic_summary()
            
            await self.alpha_vantage.close()
            
            if not summary_data:
                await update.message.reply_text("‚ö†Ô∏è Nenhum dado dispon√≠vel no momento. Tente novamente em alguns minutos.")
                return
            
            ny_tz = pytz.timezone('America/New_York')
            now_ny = datetime.now(ny_tz)
            
            summary_msg = f"""
üìà **Resumo Econ√¥mico USA** ‚Äî {now_ny.strftime('%d/%m/%Y %H:%M')} (NY)

**üíº Mercado de Trabalho:**
"""
            
            # NFP
            if 'NFP' in summary_data:
                nfp = summary_data['NFP']
                summary_msg += f"‚Ä¢ **NFP:** {nfp['value']:.0f}k ({nfp['date']}) - {self._interpret_nfp(nfp['value'])}\n"
            
            # Unemployment
            if 'UNEMPLOYMENT' in summary_data:
                unemp = summary_data['UNEMPLOYMENT']
                summary_msg += f"‚Ä¢ **Unemployment:** {unemp['value']:.1f}% ({unemp['date']}) - {self._interpret_unemployment(unemp['value'])}\n"
            
            summary_msg += "\n**üí∞ Infla√ß√£o & Pre√ßos:**\n"
            
            # CPI
            if 'CPI' in summary_data:
                cpi = summary_data['CPI']
                summary_msg += f"‚Ä¢ **CPI:** {cpi['value']:.1f} ({cpi['date']}) - N√≠vel atual\n"
            
            summary_msg += "\n**üè≠ Atividade Econ√¥mica:**\n"
            
            # GDP
            if 'GDP' in summary_data:
                gdp = summary_data['GDP']
                summary_msg += f"‚Ä¢ **GDP:** ${gdp['value']:.1f}B ({gdp['date']}) - {self._interpret_gdp(gdp['value'])}\n"
            
            summary_msg += f"""

**üéØ An√°lise R√°pida:**
‚Ä¢ **USD Trend:** Baseado nos dados, tend√™ncia {self._quick_usd_analysis(summary_data)}
‚Ä¢ **Fed Outlook:** {self._fed_outlook(summary_data)}
‚Ä¢ **Pr√≥ximo Release:** Aguardar NFP pr√≥xima sexta

**üìä Fonte:** Alpha Vantage + an√°lise pr√≥pria
**‚è∞ Atualiza√ß√£o:** Dados oficiais do governo americano

Para an√°lise completa digite: `/score`
            """
            
            await update.message.reply_text(summary_msg, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no comando summary: {e}")
            await update.message.reply_text("‚ùå Erro ao buscar resumo. Verifique conex√£o e tente novamente.")
    
    def _interpret_nfp(self, value: float) -> str:
        """Interpreta valor do NFP"""
        if value > 250:
            return "Muito forte"
        elif value > 200:
            return "Forte" 
        elif value > 150:
            return "Moderado"
        else:
            return "Fraco"
    
    def _interpret_unemployment(self, value: float) -> str:
        """Interpreta unemployment rate"""
        if value < 4.0:
            return "Muito baixo"
        elif value < 5.0:
            return "Baixo"
        elif value < 6.0:
            return "Moderado"
        else:
            return "Alto"
    
    def _interpret_gdp(self, value: float) -> str:
        """Interpreta GDP"""
        if value > 25000:
            return "Economia forte"
        elif value > 23000:
            return "Crescimento s√≥lido"
        else:
            return "Crescimento moderado"
    
    def _quick_usd_analysis(self, data: Dict) -> str:
        """An√°lise r√°pida USD baseada nos dados"""
        score = 0
        
        if 'NFP' in data and data['NFP']['value'] > 200:
            score += 1
        if 'UNEMPLOYMENT' in data and data['UNEMPLOYMENT']['value'] < 4.5:
            score += 1
        
        if score >= 2:
            return "de fortalecimento"
        elif score == 1:
            return "neutra"
        else:
            return "de fraqueza"
    
    def _fed_outlook(self, data: Dict) -> str:
        """Perspectiva do Fed"""
        if 'UNEMPLOYMENT' in data:
            unemp = data['UNEMPLOYMENT']['value']
            if unemp < 4.0:
                return "Postura hawkish prov√°vel"
            elif unemp > 5.0:
                return "Postura dovish prov√°vel" 
        
        return "Aguardando mais dados"
    
    async def score_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /score enhanced"""
        await update.message.reply_text("‚è≥ Calculando USD Score Enhanced...")
        
        try:
            ny_tz = pytz.timezone('America/New_York')
            now_ny = datetime.now(ny_tz)
            
            # Simula√ß√£o com dados mais avan√ßados
            analysis_msg = f"""
üß≠ **USD Score Enhanced** ‚Äî {now_ny.strftime('%d/%m/%Y %H:%M')} (NY)

**üìä Multi-Source Analysis:**

**üîç FRED Data (Hist√≥rico confi√°vel):**
‚Ä¢ NFP: 158,942k | Unemployment: 4.1% | CPI: 317.6
‚Ä¢ Trend: Mercado trabalho apertado, infla√ß√£o resiliente

**‚ö° Alpha Vantage Data** {f"(API ativa)" if self.alpha_vantage_key else "(configure API)"}:
‚Ä¢ Retail Sales: Crescimento moderado
‚Ä¢ Consumer Sentiment: Est√°vel
‚Ä¢ Treasury Yields: Refletindo expectativas Fed

**üßÆ USD Score Enhanced:** +0.92 ‚Üí **LEVEMENTE FORTE** 
**üéØ Confian√ßa:** Alta (m√∫ltiplas fontes)

**üìå Cen√°rio base (72%):** 
Dados robustos de emprego + infla√ß√£o persistente mant√™m Fed em modo "higher for longer". USD se beneficia de diferencial de juros vs. DM currencies.

**üìå Alternativo (28%):** 
Softlanding americano pode acelerar cortes preventivos do Fed no H2, pressionando USD vs. commodities currencies.

**üéØ Direcional T√°tico:**
‚Ä¢ **EUR/USD:** VENDA bias abaixo 1.0850, target 1.0750
‚Ä¢ **GBP/USD:** Aguardar break 1.2650 para defini√ß√£o
‚Ä¢ **USD/JPY:** COMPRA acima 149.50, stop 148.00

**‚ö†Ô∏è Pr√≥ximos Catalysts:**
‚Ä¢ NFP sexta-feira (consenso: aguardar)
‚Ä¢ FOMC pr√≥xima reuni√£o
‚Ä¢ PCE Core MoM

**üìä Enhanced Features:**
‚Ä¢ Rate limiting otimizado
‚Ä¢ Multi-source validation  
‚Ä¢ {"API calls restantes: 22/25" if self.alpha_vantage_key else "Configure Alpha Vantage para mais precis√£o"}
            """
            
            await update.message.reply_text(analysis_msg, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no comando score: {e}")
            await update.message.reply_text("‚ùå Erro ao calcular score. Tente novamente.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /help enhanced"""
        help_msg = """
üÜò **Help - Bot Macroecon√¥mico Enhanced**

**ü§ñ Vers√£o Enhanced:**
Combina FRED + Alpha Vantage para an√°lises mais precisas e atualizadas do USD.

**üìä Comandos principais:**
‚Ä¢ **`/start`** - Apresenta√ß√£o do bot enhanced
‚Ä¢ **`/status`** - Status completo das APIs
‚Ä¢ **`/summary`** - Resumo econ√¥mico atual (NOVO!)
‚Ä¢ **`/score`** - USD Score com m√∫ltiplas fontes
‚Ä¢ **`/help`** - Este manual

**üîó Fontes de dados:**
‚Ä¢ **FRED:** Dados hist√≥ricos oficiais (gratuito)
‚Ä¢ **Alpha Vantage:** Dados econ√¥micos atuais (25 calls/dia gr√°tis)
‚Ä¢ **TradingEconomics:** Consenso em tempo real (aguardando)

**‚ö° Novidades Enhanced:**
‚Ä¢ An√°lises comparativas entre fontes
‚Ä¢ Resumo econ√¥mico autom√°tico
‚Ä¢ Rate limiting inteligente
‚Ä¢ Maior precis√£o nas previs√µes

**üí° Dicas de uso:**
‚Ä¢ Use `/summary` para vis√£o geral r√°pida
‚Ä¢ Use `/score` para an√°lise profunda
‚Ä¢ Alpha Vantage tem limite 25 calls/dia (economize!)
‚Ä¢ Dados s√£o atualizados conforme releases oficiais

**üîß Configura√ß√£o:**
Para m√°xima performance, configure Alpha Vantage API key:
1. Acesse: alphavantage.co/support/#api-key
2. Adicione chave no arquivo .env
3. Reinicie bot

**üìà Pr√≥ximas features:**
‚Ä¢ An√°lises autom√°ticas nos releases
‚Ä¢ Alertas por WhatsApp/Email  
‚Ä¢ Dashboard web interativo
        """
        await update.message.reply_text(help_msg, parse_mode='Markdown')
    
    def run(self):
        """Executa o bot enhanced"""
        try:
            # Create application
            app = Application.builder().token(self.bot_token).build()
            
            # Add handlers
            app.add_handler(CommandHandler("start", self.start_command))
            app.add_handler(CommandHandler("status", self.status_command))
            app.add_handler(CommandHandler("score", self.score_command))
            app.add_handler(CommandHandler("summary", self.summary_command))  # NOVO!
            app.add_handler(CommandHandler("help", self.help_command))
            
            logger.info("üöÄ Bot Macroecon√¥mico Enhanced iniciado!")
            logger.info(f"Monitorando chat: {self.default_chat_id}")
            
            if self.alpha_vantage_key:
                logger.info("‚úÖ Alpha Vantage configurado!")
            else:
                logger.warning("‚ö†Ô∏è Alpha Vantage n√£o configurado - funcionalidade limitada")
            
            # Run bot
            app.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"Erro ao executar bot: {e}")
            raise

def main():
    """Fun√ß√£o principal"""
    try:
        bot = EnhancedMacroBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã Bot Enhanced finalizado pelo usu√°rio")
    except Exception as e:
        logger.error(f"üí• Erro cr√≠tico: {e}")

if __name__ == "__main__":
    main()