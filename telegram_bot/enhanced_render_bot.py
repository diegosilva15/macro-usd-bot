#!/usr/bin/env python3
"""
Enhanced Bot Macroecon√¥mico USD - Vers√£o SEMPRE ATUALIZADA
Com dynamic data engine para an√°lises frescas como analistas profissionais
"""

import os
import asyncio
import logging
import sys
from datetime import datetime, timedelta
from typing import Dict, Any
import pytz

# Telegram imports
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

# Import our dynamic engine
from dynamic_data_engine import DynamicDataEngine

# Configure logging for Render
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

class EnhancedRenderMacroBot:
    """Bot com dados sempre atualizados - vers√£o enhanced"""
    
    def __init__(self):
        # Get environment variables
        self.bot_token = os.getenv('BOT_TOKEN')
        self.fred_api_key = os.getenv('FRED_API_KEY')
        self.alpha_vantage_key = os.getenv('ALPHA_VANTAGE_API_KEY')
        self.default_chat_id = os.getenv('DEFAULT_CHAT_ID')
        
        # Validate required env vars
        if not self.bot_token:
            raise ValueError("‚ùå BOT_TOKEN n√£o configurado!")
        
        # Initialize dynamic data engine
        self.data_engine = DynamicDataEngine(
            fred_key=self.fred_api_key,
            alpha_vantage_key=self.alpha_vantage_key
        )
        
        logger.info("‚úÖ Enhanced Bot configurado com Dynamic Data Engine")
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /start - vers√£o enhanced"""
        ny_tz = pytz.timezone('America/New_York')
        now_ny = datetime.now(ny_tz)
        
        welcome_msg = f"""
üß≠ **Bot Macroecon√¥mico USD - Enhanced Edition**

üöÄ **NOVIDADE:** Dados sempre atualizados como analistas profissionais!
üìÖ **NY Time:** {now_ny.strftime('%d/%m/%Y %H:%M')}

**üî• Enhanced Features:**
‚Ä¢ **Dados din√¢micos** - Busca automaticamente dados atuais
‚Ä¢ **Calend√°rio semanal** - Eventos espec√≠ficos da semana
‚Ä¢ **An√°lise contextual** - Inclui riscos (shutdown, FOMC, etc.)
‚Ä¢ **Score em tempo real** - Baseado em dados frescos

**üìä Comandos Enhanced:**
‚Ä¢ `/status` - Status + calend√°rio semanal
‚Ä¢ `/score` - USD Score com dados atualizados  
‚Ä¢ `/weekly` - üÜï Outlook semanal completo
‚Ä¢ `/summary` - Resumo econ√¥mico atual
‚Ä¢ `/help` - Manual enhanced

**üîó Fontes Enhanced:**
‚Ä¢ FRED API: {"‚úÖ Ativo" if self.fred_api_key else "‚ö†Ô∏è Configure"}
‚Ä¢ Alpha Vantage: {"‚úÖ Ativo" if self.alpha_vantage_key else "‚ö†Ô∏è Configure"}  
‚Ä¢ Yahoo Finance: ‚úÖ DXY + Treasury yields
‚Ä¢ Economic Calendar: ‚úÖ Eventos semanais

**‚ö° Sempre atualizado como Bloomberg!**

Digite `/weekly` para outlook da semana atual!
        """
        await update.message.reply_text(welcome_msg, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /status enhanced com calend√°rio"""
        ny_tz = pytz.timezone('America/New_York')
        now_ny = datetime.now(ny_tz)
        
        try:
            await self.data_engine.initialize()
            
            # Get current week calendar
            calendar_data = self.data_engine.weekly_calendar
            special_events = calendar_data.get('special_events', {})
            
            status_msg = f"""
üìä **Status Enhanced - Sempre Atualizado**

üü¢ **Status:** Online 24/7 com dados din√¢micos
üìÖ **NY Time:** {now_ny.strftime('%d/%m/%Y %H:%M')}
üîÑ **Last Update:** Dados buscados em tempo real

**üîó APIs Status:**
‚Ä¢ FRED: {"‚úÖ Conectado" if self.fred_api_key else "‚ö†Ô∏è Configure FRED_API_KEY"}
‚Ä¢ Alpha Vantage: {"‚úÖ Conectado" if self.alpha_vantage_key else "‚ö†Ô∏è Configure AV_KEY"}
‚Ä¢ Yahoo Finance: ‚úÖ DXY + yields em tempo real
‚Ä¢ Dynamic Engine: ‚úÖ Ativo

**üìÖ Esta Semana - Eventos Chave:**
‚Ä¢ **Segunda:** PMI Services Final
‚Ä¢ **Ter√ßa:** JOLTs + Trade Balance  
‚Ä¢ **Quarta:** ADP + ISM Services
‚Ä¢ **Quinta:** Initial Claims
‚Ä¢ **Sexta:** NFP + Unemployment

**‚ö†Ô∏è Alertas Especiais:**
"""
            
            # Add special events
            shutdown_risk = special_events.get('government_shutdown_risk', {})
            if shutdown_risk.get('active', False):
                status_msg += f"‚Ä¢ üö® **Shutdown Risk:** {shutdown_risk['risk_level']} ({shutdown_risk['days_remaining']} dias)\n"
            
            fomc_info = special_events.get('fomc_meeting', {})
            if fomc_info.get('this_week', False):
                status_msg += f"‚Ä¢ üèõÔ∏è **FOMC Meeting:** {fomc_info['date']}\n"
            else:
                status_msg += f"‚Ä¢ üèõÔ∏è **FOMC:** Pr√≥xima reuni√£o em breve\n"
            
            status_msg += """
**üéØ Commands:** `/score` para an√°lise atual | `/weekly` para outlook
            """
            
            await update.message.reply_text(status_msg, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no status enhanced: {e}")
            await update.message.reply_text("‚ùå Erro ao buscar status. Tente novamente.")
        finally:
            await self.data_engine.close()
    
    async def score_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /score - SEMPRE ATUALIZADO"""
        await update.message.reply_text("üîÑ Buscando dados atualizados... (pode demorar 30s)")
        
        try:
            await self.data_engine.initialize()
            
            # Get fresh data
            fresh_data = await self.data_engine.get_latest_economic_data()
            
            # Calculate dynamic USD score
            analysis = self.data_engine.calculate_dynamic_usd_score(fresh_data)
            
            ny_tz = pytz.timezone('America/New_York')
            now_ny = datetime.now(ny_tz)
            
            # Format enhanced analysis message
            analysis_msg = f"""
üß≠ **USD Score Enhanced** ‚Äî {now_ny.strftime('%d/%m/%Y %H:%M')} (NY)

**üìä Dados Atualizados em Tempo Real:**

**üè¶ Componentes Analisados:**
"""
            
            # Add components found
            components = analysis.get('components', [])
            if components:
                for comp in components:
                    analysis_msg += f"‚Ä¢ {comp}\n"
            else:
                analysis_msg += "‚Ä¢ Buscando dados mais recentes...\n"
            
            score = analysis.get('score', 0)
            classification = analysis.get('classification', 'Neutro')
            confidence = analysis.get('confidence', 'Baixa')
            
            analysis_msg += f"""
**üßÆ USD Score Din√¢mico:** {score:+.2f} ‚Üí **{classification}**
**üéØ Confian√ßa:** {confidence} (dados atualizados)

**üìå An√°lise Contextual:**
"""
            
            # Add contextual analysis based on score
            if score > 1.0:
                analysis_msg += """
‚Ä¢ **Cen√°rio Dominante:** Dados robustos favorecem USD forte
‚Ä¢ **Fed Outlook:** Postura hawkish sustentada por fundamentos
‚Ä¢ **Market Impact:** Fluxo para USD vs. moedas de risco
"""
            elif score > 0.3:
                analysis_msg += """
‚Ä¢ **Cen√°rio Dominante:** Moderada fortaleza do USD
‚Ä¢ **Fed Outlook:** Mant√©m "higher for longer" cauteloso  
‚Ä¢ **Market Impact:** USD ganha seletivamente vs. majors
"""
            elif score < -1.0:
                analysis_msg += """
‚Ä¢ **Cen√°rio Dominante:** Press√£o sobre USD por dados fracos
‚Ä¢ **Fed Outlook:** Mercado antecipa pivot dovish
‚Ä¢ **Market Impact:** Fuga do USD para moedas de commodity
"""
            else:
                analysis_msg += """
‚Ä¢ **Cen√°rio Dominante:** USD em consolida√ß√£o, aguarda catalisadores
‚Ä¢ **Fed Outlook:** Dados mistos mant√™m Fed em pausa
‚Ä¢ **Market Impact:** Trading em ranges, volatilidade baixa
"""
            
            # Add special events impact
            special_events = analysis.get('special_events', {})
            
            shutdown_risk = special_events.get('government_shutdown_risk', {})
            if shutdown_risk.get('active', False):
                analysis_msg += f"\n‚ö†Ô∏è **Risco Fiscal:** Shutdown em {shutdown_risk['days_remaining']} dias pressiona USD"
            
            fomc_info = special_events.get('fomc_meeting', {})
            if fomc_info.get('this_week', False):
                analysis_msg += f"\nüèõÔ∏è **FOMC Impact:** Meeting esta semana pode aumentar volatilidade"
            
            # Generate tactical recommendations
            analysis_msg += f"""

**üéØ Recomenda√ß√µes T√°ticas:**
"""
            
            if score > 0.5:
                analysis_msg += """‚Ä¢ **EUR/USD:** VENDA bias, target 1.0700-1.0750
‚Ä¢ **GBP/USD:** Weakness esperada, break 1.2600
‚Ä¢ **USD/JPY:** COMPRA em dips, target 150.00+
‚Ä¢ **DXY:** Suporte 103.50, resist√™ncia 106.00"""
            elif score < -0.5:
                analysis_msg += """‚Ä¢ **EUR/USD:** COMPRA em dips, target 1.0900+
‚Ä¢ **GBP/USD:** Recovery para 1.2800-1.2900
‚Ä¢ **USD/JPY:** VENDA rallies, target 148.00
‚Ä¢ **DXY:** Resist√™ncia 104.50, suporte 102.00"""
            else:
                analysis_msg += """‚Ä¢ **EUR/USD:** Range 1.0750-1.0850, trade breakouts
‚Ä¢ **GBP/USD:** Consolida√ß√£o 1.2600-1.2800
‚Ä¢ **USD/JPY:** Range amplo 148.00-151.00
‚Ä¢ **DXY:** Lateraliza√ß√£o 103.00-105.00"""
            
            analysis_msg += f"""

**üîÑ Pr√≥xima Atualiza√ß√£o:** Autom√°tica com novos dados
**üìä Enhanced:** Dados din√¢micos vs. dados fixos tradicionais
            """
            
            await update.message.reply_text(analysis_msg, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no score enhanced: {e}")
            await update.message.reply_text("‚ùå Erro ao buscar dados atualizados. APIs podem estar temporariamente indispon√≠veis.")
        finally:
            await self.data_engine.close()
    
    async def weekly_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /weekly - NOVO comando outlook semanal"""
        await update.message.reply_text("üìä Gerando outlook semanal... (buscando dados atuais)")
        
        try:
            await self.data_engine.initialize()
            
            # Get fresh data and analysis
            fresh_data = await self.data_engine.get_latest_economic_data()
            analysis = self.data_engine.calculate_dynamic_usd_score(fresh_data)
            
            # Generate weekly outlook
            weekly_outlook = self.data_engine.format_weekly_outlook(analysis)
            
            await update.message.reply_text(weekly_outlook, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no weekly outlook: {e}")
            await update.message.reply_text("‚ùå Erro ao gerar outlook semanal.")
        finally:
            await self.data_engine.close()
    
    async def summary_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /summary enhanced"""
        await update.message.reply_text("üìà Buscando resumo econ√¥mico atualizado...")
        
        try:
            await self.data_engine.initialize()
            fresh_data = await self.data_engine.get_latest_economic_data()
            
            ny_tz = pytz.timezone('America/New_York')
            now_ny = datetime.now(ny_tz)
            
            summary_msg = f"""
üìà **Resumo Econ√¥mico USA Enhanced** ‚Äî {now_ny.strftime('%d/%m/%Y %H:%M')} (NY)

**üìä Dados Atualizados:**
"""
            
            # Add FRED data if available
            fred_data = fresh_data.get('fred', {})
            if fred_data:
                summary_msg += "\n**üè¶ Federal Reserve (FRED):**\n"
                
                if 'nfp' in fred_data:
                    nfp_data = fred_data['nfp']
                    summary_msg += f"‚Ä¢ NFP: {nfp_data['value']:.0f}k ({nfp_data['date']})\n"
                
                if 'unemployment' in fred_data:
                    unemp_data = fred_data['unemployment']
                    summary_msg += f"‚Ä¢ Unemployment: {unemp_data['value']:.1f}% ({unemp_data['date']})\n"
                
                if 'fed_funds' in fred_data:
                    ff_data = fred_data['fed_funds']
                    summary_msg += f"‚Ä¢ Fed Funds: {ff_data['value']:.2f}% ({ff_data['date']})\n"
            
            # Add market data
            market_data = fresh_data.get('market', {})
            if market_data:
                summary_msg += "\n**üìä Market Data (Tempo Real):**\n"
                
                if 'dxy' in market_data:
                    dxy_data = market_data['dxy']
                    summary_msg += f"‚Ä¢ DXY: {dxy_data['current']:.2f} ({dxy_data['change_pct']:+.2f}%)\n"
                
                if 'treasury_10y_yield' in market_data:
                    yield_data = market_data['treasury_10y_yield']
                    summary_msg += f"‚Ä¢ 10Y Treasury: {yield_data['current']:.2f}% ({yield_data['change_pct']:+.2f}%)\n"
            
            summary_msg += f"""

**üéØ S√≠ntese Macro:**
Dados coletados automaticamente de fontes oficiais e mercado em tempo real. Enhanced engine mant√©m an√°lises sempre atualizadas.

**üìÖ Pr√≥ximos Eventos:** Use `/weekly` para calend√°rio completo
**üßÆ An√°lise Completa:** Use `/score` para USD Score atual

**Powered by Enhanced Dynamic Engine** üöÄ
            """
            
            await update.message.reply_text(summary_msg, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro no summary enhanced: {e}")
            await update.message.reply_text("‚ùå Erro ao buscar resumo atualizado.")
        finally:
            await self.data_engine.close()
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handler para /help enhanced"""
        help_msg = """
üÜò **Manual - Bot Enhanced Always Updated**

**üöÄ Enhanced Edition - O Diferencial:**
‚Ä¢ **Dados Din√¢micos:** Busca automaticamente dados atuais
‚Ä¢ **Nunca Desatualizado:** Como analistas profissionais  
‚Ä¢ **Contexto Semanal:** Calend√°rio econ√¥mico integrado
‚Ä¢ **An√°lise em Tempo Real:** APIs m√∫ltiplas sincronizadas

**üì± Comandos Enhanced:**
‚Ä¢ **`/start`** - Apresenta√ß√£o enhanced
‚Ä¢ **`/status`** - Status + calend√°rio da semana
‚Ä¢ **`/score`** - USD Score com dados frescos (‚≠ê PRINCIPAL)
‚Ä¢ **`/weekly`** - üÜï Outlook semanal completo
‚Ä¢ **`/summary`** - Resumo econ√¥mico atualizado
‚Ä¢ **`/help`** - Este manual

**üîÑ Como Funciona o Enhanced:**
1. **Dynamic Data Engine** busca dados em tempo real
2. **Multiple APIs:** FRED + Alpha Vantage + Yahoo Finance  
3. **Smart Calendar:** Detecta eventos da semana atual
4. **Contextual Analysis:** Inclui riscos (shutdown, FOMC)
5. **Always Fresh:** Nunca usa dados hardcoded

**üìä Fontes de Dados:**
‚Ä¢ **FRED:** Dados oficiais do Federal Reserve
‚Ä¢ **Alpha Vantage:** Indicadores econ√¥micos atualizados
‚Ä¢ **Yahoo Finance:** DXY + Treasury yields tempo real
‚Ä¢ **Economic Calendar:** Eventos semanais contextualizados

**üí° Dicas Enhanced:**
‚Ä¢ Use `/score` diariamente - sempre dados frescos!
‚Ä¢ `/weekly` toda segunda para outlook da semana
‚Ä¢ Compare com analistas - mesma qualidade profissional
‚Ä¢ Bot nunca "envelhece" - sempre atualizado

**üéØ Diferen√ßa vs. Bots Tradicionais:**
‚ùå **Bots normais:** Dados fixos, desatualizados
‚úÖ **Enhanced:** Dados din√¢micos, sempre frescos

**Como Bloomberg, mas gratuito!** üìàüöÄ
        """
        await update.message.reply_text(help_msg, parse_mode='Markdown')
    
    def run(self):
        """Executa o enhanced bot no Render"""
        try:
            # Create application
            app = Application.builder().token(self.bot_token).build()
            
            # Add handlers
            app.add_handler(CommandHandler("start", self.start_command))
            app.add_handler(CommandHandler("status", self.status_command))
            app.add_handler(CommandHandler("score", self.score_command))
            app.add_handler(CommandHandler("weekly", self.weekly_command))  # NOVO!
            app.add_handler(CommandHandler("summary", self.summary_command))
            app.add_handler(CommandHandler("help", self.help_command))
            
            logger.info("üöÄ Enhanced Bot Macroecon√¥mico iniciado no Render!")
            logger.info("üîÑ Dynamic Data Engine ativo - dados sempre atualizados")
            logger.info(f"üìä APIs: FRED={'‚úÖ' if self.fred_api_key else '‚ùå'} | AlphaVantage={'‚úÖ' if self.alpha_vantage_key else '‚ùå'}")
            
            # Run bot
            app.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"üí• Erro cr√≠tico enhanced: {e}")
            raise

def main():
    """Fun√ß√£o principal enhanced"""
    try:
        logger.info("üöÄ Iniciando Enhanced Bot - Always Updated Edition...")
        bot = EnhancedRenderMacroBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã Enhanced Bot finalizado pelo usu√°rio")
    except Exception as e:
        logger.error(f"üí• Erro fatal enhanced: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()